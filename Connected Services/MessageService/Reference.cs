//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace hangmanGame.MessageService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceAccount", Namespace="http://schemas.datacontract.org/2004/07/HangmanGameService")]
    [System.SerializableAttribute()]
    public partial class ServiceAccount : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ConfirmationCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdAccountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NickNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordAccountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ConfirmationCode {
            get {
                return this.ConfirmationCodeField;
            }
            set {
                if ((this.ConfirmationCodeField.Equals(value) != true)) {
                    this.ConfirmationCodeField = value;
                    this.RaisePropertyChanged("ConfirmationCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdAccount {
            get {
                return this.IdAccountField;
            }
            set {
                if ((this.IdAccountField.Equals(value) != true)) {
                    this.IdAccountField = value;
                    this.RaisePropertyChanged("IdAccount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NickName {
            get {
                return this.NickNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NickNameField, value) != true)) {
                    this.NickNameField = value;
                    this.RaisePropertyChanged("NickName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PasswordAccount {
            get {
                return this.PasswordAccountField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordAccountField, value) != true)) {
                    this.PasswordAccountField = value;
                    this.RaisePropertyChanged("PasswordAccount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServicePlayer", Namespace="http://schemas.datacontract.org/2004/07/HangmanGameService")]
    [System.SerializableAttribute()]
    public partial class ServicePlayer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NamePlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NickNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ScoreObtainedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusPlayerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NamePlayer {
            get {
                return this.NamePlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.NamePlayerField, value) != true)) {
                    this.NamePlayerField = value;
                    this.RaisePropertyChanged("NamePlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NickName {
            get {
                return this.NickNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NickNameField, value) != true)) {
                    this.NickNameField = value;
                    this.RaisePropertyChanged("NickName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ScoreObtained {
            get {
                return this.ScoreObtainedField;
            }
            set {
                if ((this.ScoreObtainedField.Equals(value) != true)) {
                    this.ScoreObtainedField = value;
                    this.RaisePropertyChanged("ScoreObtained");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusPlayer {
            get {
                return this.StatusPlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusPlayerField, value) != true)) {
                    this.StatusPlayerField = value;
                    this.RaisePropertyChanged("StatusPlayer");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceWinner", Namespace="http://schemas.datacontract.org/2004/07/HangmanGameService")]
    [System.SerializableAttribute()]
    public partial class ServiceWinner : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MistakesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NickNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Mistakes {
            get {
                return this.MistakesField;
            }
            set {
                if ((this.MistakesField.Equals(value) != true)) {
                    this.MistakesField = value;
                    this.RaisePropertyChanged("Mistakes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NickName {
            get {
                return this.NickNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NickNameField, value) != true)) {
                    this.NickNameField = value;
                    this.RaisePropertyChanged("NickName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Points {
            get {
                return this.PointsField;
            }
            set {
                if ((this.PointsField.Equals(value) != true)) {
                    this.PointsField = value;
                    this.RaisePropertyChanged("Points");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceSentence", Namespace="http://schemas.datacontract.org/2004/07/HangmanGameService")]
    [System.SerializableAttribute()]
    public partial class ServiceSentence : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HintEnglishField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HintSpanishField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdSentenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScoreSentenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SentenceWordEnglishField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SentenceWordSpanishField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HintEnglish {
            get {
                return this.HintEnglishField;
            }
            set {
                if ((object.ReferenceEquals(this.HintEnglishField, value) != true)) {
                    this.HintEnglishField = value;
                    this.RaisePropertyChanged("HintEnglish");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HintSpanish {
            get {
                return this.HintSpanishField;
            }
            set {
                if ((object.ReferenceEquals(this.HintSpanishField, value) != true)) {
                    this.HintSpanishField = value;
                    this.RaisePropertyChanged("HintSpanish");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdSentence {
            get {
                return this.IdSentenceField;
            }
            set {
                if ((this.IdSentenceField.Equals(value) != true)) {
                    this.IdSentenceField = value;
                    this.RaisePropertyChanged("IdSentence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ScoreSentence {
            get {
                return this.ScoreSentenceField;
            }
            set {
                if ((this.ScoreSentenceField.Equals(value) != true)) {
                    this.ScoreSentenceField = value;
                    this.RaisePropertyChanged("ScoreSentence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SentenceWordEnglish {
            get {
                return this.SentenceWordEnglishField;
            }
            set {
                if ((object.ReferenceEquals(this.SentenceWordEnglishField, value) != true)) {
                    this.SentenceWordEnglishField = value;
                    this.RaisePropertyChanged("SentenceWordEnglish");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SentenceWordSpanish {
            get {
                return this.SentenceWordSpanishField;
            }
            set {
                if ((object.ReferenceEquals(this.SentenceWordSpanishField, value) != true)) {
                    this.SentenceWordSpanishField = value;
                    this.RaisePropertyChanged("SentenceWordSpanish");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceReportMisConduct", Namespace="http://schemas.datacontract.org/2004/07/HangmanGameService")]
    [System.SerializableAttribute()]
    public partial class ServiceReportMisConduct : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdditionalContextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateHourField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdReportedPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdReportingPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeReportField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdditionalContext {
            get {
                return this.AdditionalContextField;
            }
            set {
                if ((object.ReferenceEquals(this.AdditionalContextField, value) != true)) {
                    this.AdditionalContextField = value;
                    this.RaisePropertyChanged("AdditionalContext");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateHour {
            get {
                return this.DateHourField;
            }
            set {
                if ((this.DateHourField.Equals(value) != true)) {
                    this.DateHourField = value;
                    this.RaisePropertyChanged("DateHour");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IdReportedPlayer {
            get {
                return this.IdReportedPlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.IdReportedPlayerField, value) != true)) {
                    this.IdReportedPlayerField = value;
                    this.RaisePropertyChanged("IdReportedPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IdReportingPlayer {
            get {
                return this.IdReportingPlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.IdReportingPlayerField, value) != true)) {
                    this.IdReportingPlayerField = value;
                    this.RaisePropertyChanged("IdReportingPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeReport {
            get {
                return this.TypeReportField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeReportField, value) != true)) {
                    this.TypeReportField = value;
                    this.RaisePropertyChanged("TypeReport");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessageService.IPlayerManager", CallbackContract=typeof(hangmanGame.MessageService.IPlayerManagerCallback))]
    public interface IPlayerManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/LogIn", ReplyAction="http://tempuri.org/IPlayerManager/LogInResponse")]
        void LogIn(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/LogIn", ReplyAction="http://tempuri.org/IPlayerManager/LogInResponse")]
        System.Threading.Tasks.Task LogInAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/Register", ReplyAction="http://tempuri.org/IPlayerManager/RegisterResponse")]
        void Register(hangmanGame.MessageService.ServiceAccount account, hangmanGame.MessageService.ServicePlayer servicePlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/Register", ReplyAction="http://tempuri.org/IPlayerManager/RegisterResponse")]
        System.Threading.Tasks.Task RegisterAsync(hangmanGame.MessageService.ServiceAccount account, hangmanGame.MessageService.ServicePlayer servicePlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/SearchNicknamePlayer", ReplyAction="http://tempuri.org/IPlayerManager/SearchNicknamePlayerResponse")]
        void SearchNicknamePlayer(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/SearchNicknamePlayer", ReplyAction="http://tempuri.org/IPlayerManager/SearchNicknamePlayerResponse")]
        System.Threading.Tasks.Task SearchNicknamePlayerAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/SendEmail", ReplyAction="http://tempuri.org/IPlayerManager/SendEmailResponse")]
        void SendEmail(string email, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/SendEmail", ReplyAction="http://tempuri.org/IPlayerManager/SendEmailResponse")]
        System.Threading.Tasks.Task SendEmailAsync(string email, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/ChangePassword", ReplyAction="http://tempuri.org/IPlayerManager/ChangePasswordResponse")]
        void ChangePassword(string email, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/ChangePassword", ReplyAction="http://tempuri.org/IPlayerManager/ChangePasswordResponse")]
        System.Threading.Tasks.Task ChangePasswordAsync(string email, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/SearchEmailPlayer", ReplyAction="http://tempuri.org/IPlayerManager/SearchEmailPlayerResponse")]
        void SearchEmailPlayer(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/SearchEmailPlayer", ReplyAction="http://tempuri.org/IPlayerManager/SearchEmailPlayerResponse")]
        System.Threading.Tasks.Task SearchEmailPlayerAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/SearchRepeatEmailAccount", ReplyAction="http://tempuri.org/IPlayerManager/SearchRepeatEmailAccountResponse")]
        void SearchRepeatEmailAccount(string emailEdit, int idAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/SearchRepeatEmailAccount", ReplyAction="http://tempuri.org/IPlayerManager/SearchRepeatEmailAccountResponse")]
        System.Threading.Tasks.Task SearchRepeatEmailAccountAsync(string emailEdit, int idAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/SearchRepeatNicknamePlayer", ReplyAction="http://tempuri.org/IPlayerManager/SearchRepeatNicknamePlayerResponse")]
        void SearchRepeatNicknamePlayer(string nickNameEdit, string nickNameCurrent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/SearchRepeatNicknamePlayer", ReplyAction="http://tempuri.org/IPlayerManager/SearchRepeatNicknamePlayerResponse")]
        System.Threading.Tasks.Task SearchRepeatNicknamePlayerAsync(string nickNameEdit, string nickNameCurrent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/UpdateEmail", ReplyAction="http://tempuri.org/IPlayerManager/UpdateEmailResponse")]
        void UpdateEmail(string email, int idAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/UpdateEmail", ReplyAction="http://tempuri.org/IPlayerManager/UpdateEmailResponse")]
        System.Threading.Tasks.Task UpdateEmailAsync(string email, int idAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/UpdatePlayer", ReplyAction="http://tempuri.org/IPlayerManager/UpdatePlayerResponse")]
        void UpdatePlayer(string nickName, hangmanGame.MessageService.ServicePlayer servicePlayerEdit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/UpdatePlayer", ReplyAction="http://tempuri.org/IPlayerManager/UpdatePlayerResponse")]
        System.Threading.Tasks.Task UpdatePlayerAsync(string nickName, hangmanGame.MessageService.ServicePlayer servicePlayerEdit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/DeleteAccountPlayer", ReplyAction="http://tempuri.org/IPlayerManager/DeleteAccountPlayerResponse")]
        void DeleteAccountPlayer(string nickName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/DeleteAccountPlayer", ReplyAction="http://tempuri.org/IPlayerManager/DeleteAccountPlayerResponse")]
        System.Threading.Tasks.Task DeleteAccountPlayerAsync(string nickName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/PlayerResponseBoolean", ReplyAction="http://tempuri.org/IPlayerManager/PlayerResponseBooleanResponse")]
        void PlayerResponseBoolean(bool response);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerManagerChannel : hangmanGame.MessageService.IPlayerManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerManagerClient : System.ServiceModel.DuplexClientBase<hangmanGame.MessageService.IPlayerManager>, hangmanGame.MessageService.IPlayerManager {
        
        public PlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void LogIn(string email, string password) {
            base.Channel.LogIn(email, password);
        }
        
        public System.Threading.Tasks.Task LogInAsync(string email, string password) {
            return base.Channel.LogInAsync(email, password);
        }
        
        public void Register(hangmanGame.MessageService.ServiceAccount account, hangmanGame.MessageService.ServicePlayer servicePlayer) {
            base.Channel.Register(account, servicePlayer);
        }
        
        public System.Threading.Tasks.Task RegisterAsync(hangmanGame.MessageService.ServiceAccount account, hangmanGame.MessageService.ServicePlayer servicePlayer) {
            return base.Channel.RegisterAsync(account, servicePlayer);
        }
        
        public void SearchNicknamePlayer(string nickname) {
            base.Channel.SearchNicknamePlayer(nickname);
        }
        
        public System.Threading.Tasks.Task SearchNicknamePlayerAsync(string nickname) {
            return base.Channel.SearchNicknamePlayerAsync(nickname);
        }
        
        public void SendEmail(string email, int code) {
            base.Channel.SendEmail(email, code);
        }
        
        public System.Threading.Tasks.Task SendEmailAsync(string email, int code) {
            return base.Channel.SendEmailAsync(email, code);
        }
        
        public void ChangePassword(string email, string newPassword) {
            base.Channel.ChangePassword(email, newPassword);
        }
        
        public System.Threading.Tasks.Task ChangePasswordAsync(string email, string newPassword) {
            return base.Channel.ChangePasswordAsync(email, newPassword);
        }
        
        public void SearchEmailPlayer(string email) {
            base.Channel.SearchEmailPlayer(email);
        }
        
        public System.Threading.Tasks.Task SearchEmailPlayerAsync(string email) {
            return base.Channel.SearchEmailPlayerAsync(email);
        }
        
        public void SearchRepeatEmailAccount(string emailEdit, int idAccount) {
            base.Channel.SearchRepeatEmailAccount(emailEdit, idAccount);
        }
        
        public System.Threading.Tasks.Task SearchRepeatEmailAccountAsync(string emailEdit, int idAccount) {
            return base.Channel.SearchRepeatEmailAccountAsync(emailEdit, idAccount);
        }
        
        public void SearchRepeatNicknamePlayer(string nickNameEdit, string nickNameCurrent) {
            base.Channel.SearchRepeatNicknamePlayer(nickNameEdit, nickNameCurrent);
        }
        
        public System.Threading.Tasks.Task SearchRepeatNicknamePlayerAsync(string nickNameEdit, string nickNameCurrent) {
            return base.Channel.SearchRepeatNicknamePlayerAsync(nickNameEdit, nickNameCurrent);
        }
        
        public void UpdateEmail(string email, int idAccount) {
            base.Channel.UpdateEmail(email, idAccount);
        }
        
        public System.Threading.Tasks.Task UpdateEmailAsync(string email, int idAccount) {
            return base.Channel.UpdateEmailAsync(email, idAccount);
        }
        
        public void UpdatePlayer(string nickName, hangmanGame.MessageService.ServicePlayer servicePlayerEdit) {
            base.Channel.UpdatePlayer(nickName, servicePlayerEdit);
        }
        
        public System.Threading.Tasks.Task UpdatePlayerAsync(string nickName, hangmanGame.MessageService.ServicePlayer servicePlayerEdit) {
            return base.Channel.UpdatePlayerAsync(nickName, servicePlayerEdit);
        }
        
        public void DeleteAccountPlayer(string nickName) {
            base.Channel.DeleteAccountPlayer(nickName);
        }
        
        public System.Threading.Tasks.Task DeleteAccountPlayerAsync(string nickName) {
            return base.Channel.DeleteAccountPlayerAsync(nickName);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessageService.IAccountManager", CallbackContract=typeof(hangmanGame.MessageService.IAccountManagerCallback))]
    public interface IAccountManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountManager/SearchAccount", ReplyAction="http://tempuri.org/IAccountManager/SearchAccountResponse")]
        void SearchAccount(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountManager/SearchAccount", ReplyAction="http://tempuri.org/IAccountManager/SearchAccountResponse")]
        System.Threading.Tasks.Task SearchAccountAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountManager/SearchPlayer", ReplyAction="http://tempuri.org/IAccountManager/SearchPlayerResponse")]
        void SearchPlayer(string nickName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountManager/SearchPlayer", ReplyAction="http://tempuri.org/IAccountManager/SearchPlayerResponse")]
        System.Threading.Tasks.Task SearchPlayerAsync(string nickName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountManager/AccountResponseAccount", ReplyAction="http://tempuri.org/IAccountManager/AccountResponseAccountResponse")]
        void AccountResponseAccount(hangmanGame.MessageService.ServiceAccount serviceAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountManager/AccountResponsePlayer", ReplyAction="http://tempuri.org/IAccountManager/AccountResponsePlayerResponse")]
        void AccountResponsePlayer(hangmanGame.MessageService.ServicePlayer servicePlayer);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountManagerChannel : hangmanGame.MessageService.IAccountManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountManagerClient : System.ServiceModel.DuplexClientBase<hangmanGame.MessageService.IAccountManager>, hangmanGame.MessageService.IAccountManager {
        
        public AccountManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AccountManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AccountManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AccountManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AccountManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SearchAccount(string email) {
            base.Channel.SearchAccount(email);
        }
        
        public System.Threading.Tasks.Task SearchAccountAsync(string email) {
            return base.Channel.SearchAccountAsync(email);
        }
        
        public void SearchPlayer(string nickName) {
            base.Channel.SearchPlayer(nickName);
        }
        
        public System.Threading.Tasks.Task SearchPlayerAsync(string nickName) {
            return base.Channel.SearchPlayerAsync(nickName);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessageService.IPlayerScoresManager", CallbackContract=typeof(hangmanGame.MessageService.IPlayerScoresManagerCallback))]
    public interface IPlayerScoresManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerScoresManager/SearchBestScoresPlayer", ReplyAction="http://tempuri.org/IPlayerScoresManager/SearchBestScoresPlayerResponse")]
        void SearchBestScoresPlayer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerScoresManager/SearchBestScoresPlayer", ReplyAction="http://tempuri.org/IPlayerScoresManager/SearchBestScoresPlayerResponse")]
        System.Threading.Tasks.Task SearchBestScoresPlayerAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerScoresManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerScoresManager/PlayerResponseList", ReplyAction="http://tempuri.org/IPlayerScoresManager/PlayerResponseListResponse")]
        void PlayerResponseList(hangmanGame.MessageService.ServicePlayer[] responseList);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerScoresManagerChannel : hangmanGame.MessageService.IPlayerScoresManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerScoresManagerClient : System.ServiceModel.DuplexClientBase<hangmanGame.MessageService.IPlayerScoresManager>, hangmanGame.MessageService.IPlayerScoresManager {
        
        public PlayerScoresManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PlayerScoresManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PlayerScoresManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerScoresManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerScoresManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SearchBestScoresPlayer() {
            base.Channel.SearchBestScoresPlayer();
        }
        
        public System.Threading.Tasks.Task SearchBestScoresPlayerAsync() {
            return base.Channel.SearchBestScoresPlayerAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessageService.IChatManager", CallbackContract=typeof(hangmanGame.MessageService.IChatManagerCallback))]
    public interface IChatManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/ClientConnect", ReplyAction="http://tempuri.org/IChatManager/ClientConnectResponse")]
        void ClientConnect(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/ClientConnect", ReplyAction="http://tempuri.org/IChatManager/ClientConnectResponse")]
        System.Threading.Tasks.Task ClientConnectAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/GetNewMessages", ReplyAction="http://tempuri.org/IChatManager/GetNewMessagesResponse")]
        void GetNewMessages(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/GetNewMessages", ReplyAction="http://tempuri.org/IChatManager/GetNewMessagesResponse")]
        System.Threading.Tasks.Task GetNewMessagesAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/SendNewMessages", ReplyAction="http://tempuri.org/IChatManager/SendNewMessagesResponse")]
        void SendNewMessages(string newMessage, string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/SendNewMessages", ReplyAction="http://tempuri.org/IChatManager/SendNewMessagesResponse")]
        System.Threading.Tasks.Task SendNewMessagesAsync(string newMessage, string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/RemoveUser", ReplyAction="http://tempuri.org/IChatManager/RemoveUserResponse")]
        void RemoveUser(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/RemoveUser", ReplyAction="http://tempuri.org/IChatManager/RemoveUserResponse")]
        System.Threading.Tasks.Task RemoveUserAsync(string nickname);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/ChatResponseBoolean", ReplyAction="http://tempuri.org/IChatManager/ChatResponseBooleanResponse")]
        void ChatResponseBoolean(bool responseBoolean);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/PlayerEntryMessages", ReplyAction="http://tempuri.org/IChatManager/PlayerEntryMessagesResponse")]
        void PlayerEntryMessages(string responseListString);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatManagerChannel : hangmanGame.MessageService.IChatManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatManagerClient : System.ServiceModel.DuplexClientBase<hangmanGame.MessageService.IChatManager>, hangmanGame.MessageService.IChatManager {
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ClientConnect(string nickname) {
            base.Channel.ClientConnect(nickname);
        }
        
        public System.Threading.Tasks.Task ClientConnectAsync(string nickname) {
            return base.Channel.ClientConnectAsync(nickname);
        }
        
        public void GetNewMessages(string nickname) {
            base.Channel.GetNewMessages(nickname);
        }
        
        public System.Threading.Tasks.Task GetNewMessagesAsync(string nickname) {
            return base.Channel.GetNewMessagesAsync(nickname);
        }
        
        public void SendNewMessages(string newMessage, string nickname) {
            base.Channel.SendNewMessages(newMessage, nickname);
        }
        
        public System.Threading.Tasks.Task SendNewMessagesAsync(string newMessage, string nickname) {
            return base.Channel.SendNewMessagesAsync(newMessage, nickname);
        }
        
        public void RemoveUser(string nickname) {
            base.Channel.RemoveUser(nickname);
        }
        
        public System.Threading.Tasks.Task RemoveUserAsync(string nickname) {
            return base.Channel.RemoveUserAsync(nickname);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessageService.IInformationPlayerManager", CallbackContract=typeof(hangmanGame.MessageService.IInformationPlayerManagerCallback))]
    public interface IInformationPlayerManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationPlayerManager/SearchInformationPlayer", ReplyAction="http://tempuri.org/IInformationPlayerManager/SearchInformationPlayerResponse")]
        void SearchInformationPlayer(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationPlayerManager/SearchInformationPlayer", ReplyAction="http://tempuri.org/IInformationPlayerManager/SearchInformationPlayerResponse")]
        System.Threading.Tasks.Task SearchInformationPlayerAsync(string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInformationPlayerManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationPlayerManager/PlayerResponseInformation", ReplyAction="http://tempuri.org/IInformationPlayerManager/PlayerResponseInformationResponse")]
        void PlayerResponseInformation(hangmanGame.MessageService.ServicePlayer response);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInformationPlayerManagerChannel : hangmanGame.MessageService.IInformationPlayerManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InformationPlayerManagerClient : System.ServiceModel.DuplexClientBase<hangmanGame.MessageService.IInformationPlayerManager>, hangmanGame.MessageService.IInformationPlayerManager {
        
        public InformationPlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public InformationPlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public InformationPlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public InformationPlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public InformationPlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SearchInformationPlayer(string email) {
            base.Channel.SearchInformationPlayer(email);
        }
        
        public System.Threading.Tasks.Task SearchInformationPlayerAsync(string email) {
            return base.Channel.SearchInformationPlayerAsync(email);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessageService.IPlayConnect", CallbackContract=typeof(hangmanGame.MessageService.IPlayConnectCallback))]
    public interface IPlayConnect {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayConnect/PlayerConnect", ReplyAction="http://tempuri.org/IPlayConnect/PlayerConnectResponse")]
        void PlayerConnect(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayConnect/PlayerConnect", ReplyAction="http://tempuri.org/IPlayConnect/PlayerConnectResponse")]
        System.Threading.Tasks.Task PlayerConnectAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayConnect/PlayerDisconnect", ReplyAction="http://tempuri.org/IPlayConnect/PlayerDisconnectResponse")]
        void PlayerDisconnect(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayConnect/PlayerDisconnect", ReplyAction="http://tempuri.org/IPlayConnect/PlayerDisconnectResponse")]
        System.Threading.Tasks.Task PlayerDisconnectAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayConnect/StartGame", ReplyAction="http://tempuri.org/IPlayConnect/StartGameResponse")]
        void StartGame(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayConnect/StartGame", ReplyAction="http://tempuri.org/IPlayConnect/StartGameResponse")]
        System.Threading.Tasks.Task StartGameAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayConnect/VerifyGameStart", ReplyAction="http://tempuri.org/IPlayConnect/VerifyGameStartResponse")]
        void VerifyGameStart();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayConnect/VerifyGameStart", ReplyAction="http://tempuri.org/IPlayConnect/VerifyGameStartResponse")]
        System.Threading.Tasks.Task VerifyGameStartAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayConnect/GameOver", ReplyAction="http://tempuri.org/IPlayConnect/GameOverResponse")]
        void GameOver(hangmanGame.MessageService.ServiceWinner serviceWinner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayConnect/GameOver", ReplyAction="http://tempuri.org/IPlayConnect/GameOverResponse")]
        System.Threading.Tasks.Task GameOverAsync(hangmanGame.MessageService.ServiceWinner serviceWinner);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayConnectCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayConnect/PlayerConnectList", ReplyAction="http://tempuri.org/IPlayConnect/PlayerConnectListResponse")]
        void PlayerConnectList(hangmanGame.MessageService.ServicePlayer[] servicePlayerList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayConnect/IsStarGame", ReplyAction="http://tempuri.org/IPlayConnect/IsStarGameResponse")]
        void IsStarGame([System.ServiceModel.MessageParameterAttribute(Name="isStarGame")] bool isStarGame1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayConnect/SentenceFound", ReplyAction="http://tempuri.org/IPlayConnect/SentenceFoundResponse")]
        void SentenceFound(hangmanGame.MessageService.ServiceSentence responseSentence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayConnect/PlayerWinner", ReplyAction="http://tempuri.org/IPlayConnect/PlayerWinnerResponse")]
        void PlayerWinner([System.ServiceModel.MessageParameterAttribute(Name="playerWinner")] hangmanGame.MessageService.ServiceWinner playerWinner1);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayConnectChannel : hangmanGame.MessageService.IPlayConnect, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayConnectClient : System.ServiceModel.DuplexClientBase<hangmanGame.MessageService.IPlayConnect>, hangmanGame.MessageService.IPlayConnect {
        
        public PlayConnectClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PlayConnectClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PlayConnectClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayConnectClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayConnectClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void PlayerConnect(string nickname) {
            base.Channel.PlayerConnect(nickname);
        }
        
        public System.Threading.Tasks.Task PlayerConnectAsync(string nickname) {
            return base.Channel.PlayerConnectAsync(nickname);
        }
        
        public void PlayerDisconnect(string nickname) {
            base.Channel.PlayerDisconnect(nickname);
        }
        
        public System.Threading.Tasks.Task PlayerDisconnectAsync(string nickname) {
            return base.Channel.PlayerDisconnectAsync(nickname);
        }
        
        public void StartGame(string nickname) {
            base.Channel.StartGame(nickname);
        }
        
        public System.Threading.Tasks.Task StartGameAsync(string nickname) {
            return base.Channel.StartGameAsync(nickname);
        }
        
        public void VerifyGameStart() {
            base.Channel.VerifyGameStart();
        }
        
        public System.Threading.Tasks.Task VerifyGameStartAsync() {
            return base.Channel.VerifyGameStartAsync();
        }
        
        public void GameOver(hangmanGame.MessageService.ServiceWinner serviceWinner) {
            base.Channel.GameOver(serviceWinner);
        }
        
        public System.Threading.Tasks.Task GameOverAsync(hangmanGame.MessageService.ServiceWinner serviceWinner) {
            return base.Channel.GameOverAsync(serviceWinner);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessageService.IReportManager", CallbackContract=typeof(hangmanGame.MessageService.IReportManagerCallback))]
    public interface IReportManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/ReportPlayer", ReplyAction="http://tempuri.org/IReportManager/ReportPlayerResponse")]
        void ReportPlayer(hangmanGame.MessageService.ServiceReportMisConduct serviceReportMisConduct);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/ReportPlayer", ReplyAction="http://tempuri.org/IReportManager/ReportPlayerResponse")]
        System.Threading.Tasks.Task ReportPlayerAsync(hangmanGame.MessageService.ServiceReportMisConduct serviceReportMisConduct);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/ReportList", ReplyAction="http://tempuri.org/IReportManager/ReportListResponse")]
        void ReportList(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/ReportList", ReplyAction="http://tempuri.org/IReportManager/ReportListResponse")]
        System.Threading.Tasks.Task ReportListAsync(string nickname);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReportManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/ResponseReportPlayer", ReplyAction="http://tempuri.org/IReportManager/ResponseReportPlayerResponse")]
        void ResponseReportPlayer(bool isReport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/ResponseReportList", ReplyAction="http://tempuri.org/IReportManager/ResponseReportListResponse")]
        void ResponseReportList(hangmanGame.MessageService.ServiceReportMisConduct[] reportMisConducts);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReportManagerChannel : hangmanGame.MessageService.IReportManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReportManagerClient : System.ServiceModel.DuplexClientBase<hangmanGame.MessageService.IReportManager>, hangmanGame.MessageService.IReportManager {
        
        public ReportManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ReportManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ReportManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ReportManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ReportManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ReportPlayer(hangmanGame.MessageService.ServiceReportMisConduct serviceReportMisConduct) {
            base.Channel.ReportPlayer(serviceReportMisConduct);
        }
        
        public System.Threading.Tasks.Task ReportPlayerAsync(hangmanGame.MessageService.ServiceReportMisConduct serviceReportMisConduct) {
            return base.Channel.ReportPlayerAsync(serviceReportMisConduct);
        }
        
        public void ReportList(string nickname) {
            base.Channel.ReportList(nickname);
        }
        
        public System.Threading.Tasks.Task ReportListAsync(string nickname) {
            return base.Channel.ReportListAsync(nickname);
        }
    }
}
