//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace hangmanGame.MessageService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceAccount", Namespace="http://schemas.datacontract.org/2004/07/HangmanGameService")]
    [System.SerializableAttribute()]
    public partial class ServiceAccount : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ConfirmationCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NickNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordAccountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ConfirmationCode {
            get {
                return this.ConfirmationCodeField;
            }
            set {
                if ((this.ConfirmationCodeField.Equals(value) != true)) {
                    this.ConfirmationCodeField = value;
                    this.RaisePropertyChanged("ConfirmationCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NickName {
            get {
                return this.NickNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NickNameField, value) != true)) {
                    this.NickNameField = value;
                    this.RaisePropertyChanged("NickName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PasswordAccount {
            get {
                return this.PasswordAccountField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordAccountField, value) != true)) {
                    this.PasswordAccountField = value;
                    this.RaisePropertyChanged("PasswordAccount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServicePlayer", Namespace="http://schemas.datacontract.org/2004/07/HangmanGameService")]
    [System.SerializableAttribute()]
    public partial class ServicePlayer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NamePlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NickNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ScoreObtainedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private hangmanGame.MessageService.ServiceReportMisConduct[] ServiceReportMisConductField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusPlayerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NamePlayer {
            get {
                return this.NamePlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.NamePlayerField, value) != true)) {
                    this.NamePlayerField = value;
                    this.RaisePropertyChanged("NamePlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NickName {
            get {
                return this.NickNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NickNameField, value) != true)) {
                    this.NickNameField = value;
                    this.RaisePropertyChanged("NickName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ScoreObtained {
            get {
                return this.ScoreObtainedField;
            }
            set {
                if ((this.ScoreObtainedField.Equals(value) != true)) {
                    this.ScoreObtainedField = value;
                    this.RaisePropertyChanged("ScoreObtained");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public hangmanGame.MessageService.ServiceReportMisConduct[] ServiceReportMisConduct {
            get {
                return this.ServiceReportMisConductField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceReportMisConductField, value) != true)) {
                    this.ServiceReportMisConductField = value;
                    this.RaisePropertyChanged("ServiceReportMisConduct");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusPlayer {
            get {
                return this.StatusPlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusPlayerField, value) != true)) {
                    this.StatusPlayerField = value;
                    this.RaisePropertyChanged("StatusPlayer");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceReportMisConduct", Namespace="http://schemas.datacontract.org/2004/07/HangmanGameService")]
    [System.SerializableAttribute()]
    public partial class ServiceReportMisConduct : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdditionalContextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateHourField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdReportMisConductField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdReportedPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdReportingPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private hangmanGame.MessageService.ServicePlayer ServicePlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeReportField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdditionalContext {
            get {
                return this.AdditionalContextField;
            }
            set {
                if ((object.ReferenceEquals(this.AdditionalContextField, value) != true)) {
                    this.AdditionalContextField = value;
                    this.RaisePropertyChanged("AdditionalContext");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateHour {
            get {
                return this.DateHourField;
            }
            set {
                if ((this.DateHourField.Equals(value) != true)) {
                    this.DateHourField = value;
                    this.RaisePropertyChanged("DateHour");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdReportMisConduct {
            get {
                return this.IdReportMisConductField;
            }
            set {
                if ((this.IdReportMisConductField.Equals(value) != true)) {
                    this.IdReportMisConductField = value;
                    this.RaisePropertyChanged("IdReportMisConduct");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IdReportedPlayer {
            get {
                return this.IdReportedPlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.IdReportedPlayerField, value) != true)) {
                    this.IdReportedPlayerField = value;
                    this.RaisePropertyChanged("IdReportedPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IdReportingPlayer {
            get {
                return this.IdReportingPlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.IdReportingPlayerField, value) != true)) {
                    this.IdReportingPlayerField = value;
                    this.RaisePropertyChanged("IdReportingPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public hangmanGame.MessageService.ServicePlayer ServicePlayer {
            get {
                return this.ServicePlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.ServicePlayerField, value) != true)) {
                    this.ServicePlayerField = value;
                    this.RaisePropertyChanged("ServicePlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeReport {
            get {
                return this.TypeReportField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeReportField, value) != true)) {
                    this.TypeReportField = value;
                    this.RaisePropertyChanged("TypeReport");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessageService.IHangmanGameService", CallbackContract=typeof(hangmanGame.MessageService.IHangmanGameServiceCallback))]
    public interface IHangmanGameService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanGameService/SendOperation", ReplyAction="http://tempuri.org/IHangmanGameService/SendOperationResponse")]
        void SendOperation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanGameService/SendOperation", ReplyAction="http://tempuri.org/IHangmanGameService/SendOperationResponse")]
        System.Threading.Tasks.Task SendOperationAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHangmanGameServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanGameService/Response", ReplyAction="http://tempuri.org/IHangmanGameService/ResponseResponse")]
        void Response(int result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHangmanGameServiceChannel : hangmanGame.MessageService.IHangmanGameService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HangmanGameServiceClient : System.ServiceModel.DuplexClientBase<hangmanGame.MessageService.IHangmanGameService>, hangmanGame.MessageService.IHangmanGameService {
        
        public HangmanGameServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public HangmanGameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public HangmanGameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public HangmanGameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public HangmanGameServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendOperation() {
            base.Channel.SendOperation();
        }
        
        public System.Threading.Tasks.Task SendOperationAsync() {
            return base.Channel.SendOperationAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessageService.IPlayerManager", CallbackContract=typeof(hangmanGame.MessageService.IPlayerManagerCallback))]
    public interface IPlayerManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/LogIn", ReplyAction="http://tempuri.org/IPlayerManager/LogInResponse")]
        void LogIn(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/LogIn", ReplyAction="http://tempuri.org/IPlayerManager/LogInResponse")]
        System.Threading.Tasks.Task LogInAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/Register", ReplyAction="http://tempuri.org/IPlayerManager/RegisterResponse")]
        void Register(hangmanGame.MessageService.ServiceAccount account, hangmanGame.MessageService.ServicePlayer servicePlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/Register", ReplyAction="http://tempuri.org/IPlayerManager/RegisterResponse")]
        System.Threading.Tasks.Task RegisterAsync(hangmanGame.MessageService.ServiceAccount account, hangmanGame.MessageService.ServicePlayer servicePlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/SendEmail", ReplyAction="http://tempuri.org/IPlayerManager/SendEmailResponse")]
        void SendEmail(string email, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/SendEmail", ReplyAction="http://tempuri.org/IPlayerManager/SendEmailResponse")]
        System.Threading.Tasks.Task SendEmailAsync(string email, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/ChangePassword", ReplyAction="http://tempuri.org/IPlayerManager/ChangePasswordResponse")]
        void ChangePassword(string email, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/ChangePassword", ReplyAction="http://tempuri.org/IPlayerManager/ChangePasswordResponse")]
        System.Threading.Tasks.Task ChangePasswordAsync(string email, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/SearchEmailPlayer", ReplyAction="http://tempuri.org/IPlayerManager/SearchEmailPlayerResponse")]
        void SearchEmailPlayer(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/SearchEmailPlayer", ReplyAction="http://tempuri.org/IPlayerManager/SearchEmailPlayerResponse")]
        System.Threading.Tasks.Task SearchEmailPlayerAsync(string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/PlayerResponseBoolean", ReplyAction="http://tempuri.org/IPlayerManager/PlayerResponseBooleanResponse")]
        void PlayerResponseBoolean(bool response);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerManagerChannel : hangmanGame.MessageService.IPlayerManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerManagerClient : System.ServiceModel.DuplexClientBase<hangmanGame.MessageService.IPlayerManager>, hangmanGame.MessageService.IPlayerManager {
        
        public PlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void LogIn(string email, string password) {
            base.Channel.LogIn(email, password);
        }
        
        public System.Threading.Tasks.Task LogInAsync(string email, string password) {
            return base.Channel.LogInAsync(email, password);
        }
        
        public void Register(hangmanGame.MessageService.ServiceAccount account, hangmanGame.MessageService.ServicePlayer servicePlayer) {
            base.Channel.Register(account, servicePlayer);
        }
        
        public System.Threading.Tasks.Task RegisterAsync(hangmanGame.MessageService.ServiceAccount account, hangmanGame.MessageService.ServicePlayer servicePlayer) {
            return base.Channel.RegisterAsync(account, servicePlayer);
        }
        
        public void SendEmail(string email, int code) {
            base.Channel.SendEmail(email, code);
        }
        
        public System.Threading.Tasks.Task SendEmailAsync(string email, int code) {
            return base.Channel.SendEmailAsync(email, code);
        }
        
        public void ChangePassword(string email, string newPassword) {
            base.Channel.ChangePassword(email, newPassword);
        }
        
        public System.Threading.Tasks.Task ChangePasswordAsync(string email, string newPassword) {
            return base.Channel.ChangePasswordAsync(email, newPassword);
        }
        
        public void SearchEmailPlayer(string email) {
            base.Channel.SearchEmailPlayer(email);
        }
        
        public System.Threading.Tasks.Task SearchEmailPlayerAsync(string email) {
            return base.Channel.SearchEmailPlayerAsync(email);
        }
    }
}
